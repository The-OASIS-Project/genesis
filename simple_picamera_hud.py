# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# Authors:
# - Original Concept Script: Jamie, Instgram @MrInquisitiveFace
# - Enhancements and Maintainer: Kris Kersey <kris@kerseyfabrications.com>
#
# Portions of this script were generated by ChatGPT.
# For a helpful embedded development GPT see:
# https://chatgpt.com/g/g-M69Jxv95D-embedded-c-co-pilot

import pygame
import time
from picamera2 import Picamera2, Preview
import numpy as np
import os
import sys
from datetime import datetime

# Define the resolution, framerate, and rotation variables
camera_resolution = (1920, 1080)
desired_framerate = 30  # Set this to a specific value
rotate = 0  # Rotation angle (0, 90, 180, 270)

# Initialize Pygame
pygame.init()

# Get the size of the fullscreen display
infoObject = pygame.display.Info()
screen_width, screen_height = infoObject.current_w, infoObject.current_h

# Create a Picamera2 instance
picam2 = Picamera2()

# Print camera capabilities if available
def print_camera_capabilities(picam2):
    print("Camera Capabilities:")
    try:
        modes = picam2.sensor_modes
        for mode in modes:
            resolution = mode.get("size", "Unknown")
            framerate = mode.get("fps", "Unknown")
            format = mode.get("format", "Unknown")
            print(f"Resolution: {resolution}, Framerate: {framerate}, Format: {format}")
    except Exception as e:
        print(f"Error retrieving camera capabilities: {e}")

print_camera_capabilities(picam2)

# Configure the camera with the desired settings
config = picam2.create_preview_configuration(
    main={"size": camera_resolution, "format": "RGB888"})
picam2.configure(config)

# Set the desired frame rate
picam2.set_controls({"FrameRate": desired_framerate})

# Start the camera
picam2.start()

# Create a window (initially fullscreen)
screen = pygame.display.set_mode((screen_width, screen_height), pygame.FULLSCREEN)
pygame.display.set_caption("Camera Feed")

def rotate_image(image, angle):
    if angle == 90:
        return np.rot90(image, k=-1)
    elif angle == 180:
        return np.rot90(image, k=2)
    elif angle == 270:
        return np.rot90(image, k=1)
    else:
        return image

# Set up font for FPS and time display
font = pygame.font.SysFont("Arial", 30)
clock = pygame.time.Clock()

# Define event handler functions
def handle_quit():
    global running
    running = False

def handle_shutdown():
    os.system("sudo shutdown now")
    global running
    running = False

def toggle_fullscreen():
    global fullscreen
    global screen
    global screen_width, screen_height
    fullscreen = not fullscreen
    if not fullscreen:
        screen = pygame.display.set_mode((screen.get_width(), screen.get_height()), pygame.RESIZABLE)
    else:
        screen_width, screen_height = infoObject.current_w, infoObject.current_h
        screen = pygame.display.set_mode((screen_width, screen_height), pygame.FULLSCREEN)

# Dictionary mapping keys to handler functions
key_event_handlers = {
    pygame.K_e: handle_quit,
    pygame.K_q: handle_quit,
    pygame.K_p: handle_shutdown,
    pygame.K_f: toggle_fullscreen
}

# Stream the camera feed to the window
try:
    running = True
    fullscreen = True
    while running:
        # Capture the frame
        try:
            frame = picam2.capture_array()
        except Exception as e:
            print(f"Error capturing frame: {e}")
            continue

        # Rotate the frame by the specified angle using NumPy
        frame_rotated = rotate_image(frame, rotate)

        # Convert the rotated frame to a Pygame surface
        try:
            frame_surface = pygame.surfarray.make_surface(frame_rotated.swapaxes(0, 1))
        except Exception as e:
            print(f"Error creating Pygame surface: {e}")
            continue

        # Scale the frame surface to fit the current window size
        scaled_frame_surface = pygame.transform.scale(frame_surface, (screen.get_width(), screen.get_height()))

        # Display the scaled frame surface
        screen.blit(scaled_frame_surface, (0, 0))

        # Calculate and display FPS
        fps = clock.get_fps()
        fps_text = font.render(f"FPS: {int(fps)}", True, (255, 255, 255))
        screen.blit(fps_text, (screen.get_width() - fps_text.get_width() - 10, 10))

        # Get current system time
        current_time = datetime.now().strftime("%I:%M:%S %p")
        time_text = font.render(current_time, True, (255, 255, 255))
        screen.blit(time_text, (10, 10))

        pygame.display.flip()

        # Check for quit events and key presses
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                handler = key_event_handlers.get(event.key)
                if handler:
                    handler()

        # Control frame rate
        clock.tick(desired_framerate)

finally:
    # Close the camera and quit Pygame
    picam2.stop()
    pygame.quit()
    sys.exit()
